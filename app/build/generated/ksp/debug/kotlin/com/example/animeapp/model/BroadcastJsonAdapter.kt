// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.animeapp.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import java.lang.NullPointerException
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class BroadcastJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Broadcast>() {
  private val options: JsonReader.Options = JsonReader.Options.of("day", "time", "timezone",
      "string")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "day")

  override fun toString(): String = buildString(31) {
      append("GeneratedJsonAdapter(").append("Broadcast").append(')') }

  override fun fromJson(reader: JsonReader): Broadcast {
    var day: String? = null
    var time: String? = null
    var timezone: String? = null
    var string: String? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> day = nullableStringAdapter.fromJson(reader)
        1 -> time = nullableStringAdapter.fromJson(reader)
        2 -> timezone = nullableStringAdapter.fromJson(reader)
        3 -> string = nullableStringAdapter.fromJson(reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Broadcast(
        day = day,
        time = time,
        timezone = timezone,
        string = string
    )
  }

  override fun toJson(writer: JsonWriter, value_: Broadcast?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("day")
    nullableStringAdapter.toJson(writer, value_.day)
    writer.name("time")
    nullableStringAdapter.toJson(writer, value_.time)
    writer.name("timezone")
    nullableStringAdapter.toJson(writer, value_.timezone)
    writer.name("string")
    nullableStringAdapter.toJson(writer, value_.string)
    writer.endObject()
  }
}

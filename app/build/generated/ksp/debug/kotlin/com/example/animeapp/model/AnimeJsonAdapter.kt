// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.animeapp.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.Types
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.Unit
import kotlin.collections.List
import kotlin.collections.emptySet
import kotlin.text.buildString

public class AnimeJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Anime>() {
  private val options: JsonReader.Options = JsonReader.Options.of("mal_id", "url", "images",
      "trailer", "approved", "titles", "title", "title_english", "title_japanese", "title_synonyms",
      "type", "source", "episodes", "status", "airing", "aired", "duration", "rating", "score",
      "scored_by", "rank", "popularity", "members", "favorites", "synopsis", "background", "season",
      "year", "broadcast", "producers", "licensors", "studios", "genres", "explicit_genres",
      "themes", "demographics")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(), "malId")

  private val stringAdapter: JsonAdapter<String> = moshi.adapter(String::class.java, emptySet(),
      "url")

  private val imagesAdapter: JsonAdapter<Images> = moshi.adapter(Images::class.java, emptySet(),
      "images")

  private val trailerAdapter: JsonAdapter<Trailer> = moshi.adapter(Trailer::class.java, emptySet(),
      "trailer")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "approved")

  private val listOfTitleAdapter: JsonAdapter<List<Title>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Title::class.java), emptySet(),
      "titles")

  private val nullableStringAdapter: JsonAdapter<String?> = moshi.adapter(String::class.java,
      emptySet(), "titleEnglish")

  private val listOfStringAdapter: JsonAdapter<List<String>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, String::class.java), emptySet(),
      "titleSynonyms")

  private val nullableIntAdapter: JsonAdapter<Int?> = moshi.adapter(Int::class.javaObjectType,
      emptySet(), "episodes")

  private val airedAdapter: JsonAdapter<Aired> = moshi.adapter(Aired::class.java, emptySet(),
      "aired")

  private val nullableDoubleAdapter: JsonAdapter<Double?> =
      moshi.adapter(Double::class.javaObjectType, emptySet(), "score")

  private val nullableBroadcastAdapter: JsonAdapter<Broadcast?> =
      moshi.adapter(Broadcast::class.java, emptySet(), "broadcast")

  private val listOfEntityAdapter: JsonAdapter<List<Entity>> =
      moshi.adapter(Types.newParameterizedType(List::class.java, Entity::class.java), emptySet(),
      "producers")

  public override fun toString(): String = buildString(27) {
      append("GeneratedJsonAdapter(").append("Anime").append(')') }

  public override fun fromJson(reader: JsonReader): Anime {
    var malId: Int? = null
    var url: String? = null
    var images: Images? = null
    var trailer: Trailer? = null
    var approved: Boolean? = null
    var titles: List<Title>? = null
    var title: String? = null
    var titleEnglish: String? = null
    var titleJapanese: String? = null
    var titleSynonyms: List<String>? = null
    var type: String? = null
    var source: String? = null
    var episodes: Int? = null
    var status: String? = null
    var airing: Boolean? = null
    var aired: Aired? = null
    var duration: String? = null
    var rating: String? = null
    var score: Double? = null
    var scoredBy: Int? = null
    var rank: Int? = null
    var popularity: Int? = null
    var members: Int? = null
    var favorites: Int? = null
    var synopsis: String? = null
    var background: String? = null
    var season: String? = null
    var year: Int? = null
    var broadcast: Broadcast? = null
    var producers: List<Entity>? = null
    var licensors: List<Entity>? = null
    var studios: List<Entity>? = null
    var genres: List<Entity>? = null
    var explicitGenres: List<Entity>? = null
    var themes: List<Entity>? = null
    var demographics: List<Entity>? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> malId = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("malId", "mal_id",
            reader)
        1 -> url = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("url", "url", reader)
        2 -> images = imagesAdapter.fromJson(reader) ?: throw Util.unexpectedNull("images",
            "images", reader)
        3 -> trailer = trailerAdapter.fromJson(reader) ?: throw Util.unexpectedNull("trailer",
            "trailer", reader)
        4 -> approved = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("approved",
            "approved", reader)
        5 -> titles = listOfTitleAdapter.fromJson(reader) ?: throw Util.unexpectedNull("titles",
            "titles", reader)
        6 -> title = stringAdapter.fromJson(reader) ?: throw Util.unexpectedNull("title", "title",
            reader)
        7 -> titleEnglish = nullableStringAdapter.fromJson(reader)
        8 -> titleJapanese = nullableStringAdapter.fromJson(reader)
        9 -> titleSynonyms = listOfStringAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("titleSynonyms", "title_synonyms", reader)
        10 -> type = nullableStringAdapter.fromJson(reader)
        11 -> source = nullableStringAdapter.fromJson(reader)
        12 -> episodes = nullableIntAdapter.fromJson(reader)
        13 -> status = nullableStringAdapter.fromJson(reader)
        14 -> airing = booleanAdapter.fromJson(reader) ?: throw Util.unexpectedNull("airing",
            "airing", reader)
        15 -> aired = airedAdapter.fromJson(reader) ?: throw Util.unexpectedNull("aired", "aired",
            reader)
        16 -> duration = nullableStringAdapter.fromJson(reader)
        17 -> rating = nullableStringAdapter.fromJson(reader)
        18 -> score = nullableDoubleAdapter.fromJson(reader)
        19 -> scoredBy = nullableIntAdapter.fromJson(reader)
        20 -> rank = nullableIntAdapter.fromJson(reader)
        21 -> popularity = nullableIntAdapter.fromJson(reader)
        22 -> members = nullableIntAdapter.fromJson(reader)
        23 -> favorites = nullableIntAdapter.fromJson(reader)
        24 -> synopsis = nullableStringAdapter.fromJson(reader)
        25 -> background = nullableStringAdapter.fromJson(reader)
        26 -> season = nullableStringAdapter.fromJson(reader)
        27 -> year = nullableIntAdapter.fromJson(reader)
        28 -> broadcast = nullableBroadcastAdapter.fromJson(reader)
        29 -> producers = listOfEntityAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("producers", "producers", reader)
        30 -> licensors = listOfEntityAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("licensors", "licensors", reader)
        31 -> studios = listOfEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("studios",
            "studios", reader)
        32 -> genres = listOfEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("genres",
            "genres", reader)
        33 -> explicitGenres = listOfEntityAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("explicitGenres", "explicit_genres", reader)
        34 -> themes = listOfEntityAdapter.fromJson(reader) ?: throw Util.unexpectedNull("themes",
            "themes", reader)
        35 -> demographics = listOfEntityAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("demographics", "demographics", reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Anime(
        malId = malId ?: throw Util.missingProperty("malId", "mal_id", reader),
        url = url ?: throw Util.missingProperty("url", "url", reader),
        images = images ?: throw Util.missingProperty("images", "images", reader),
        trailer = trailer ?: throw Util.missingProperty("trailer", "trailer", reader),
        approved = approved ?: throw Util.missingProperty("approved", "approved", reader),
        titles = titles ?: throw Util.missingProperty("titles", "titles", reader),
        title = title ?: throw Util.missingProperty("title", "title", reader),
        titleEnglish = titleEnglish,
        titleJapanese = titleJapanese,
        titleSynonyms = titleSynonyms ?: throw Util.missingProperty("titleSynonyms",
            "title_synonyms", reader),
        type = type,
        source = source,
        episodes = episodes,
        status = status,
        airing = airing ?: throw Util.missingProperty("airing", "airing", reader),
        aired = aired ?: throw Util.missingProperty("aired", "aired", reader),
        duration = duration,
        rating = rating,
        score = score,
        scoredBy = scoredBy,
        rank = rank,
        popularity = popularity,
        members = members,
        favorites = favorites,
        synopsis = synopsis,
        background = background,
        season = season,
        year = year,
        broadcast = broadcast,
        producers = producers ?: throw Util.missingProperty("producers", "producers", reader),
        licensors = licensors ?: throw Util.missingProperty("licensors", "licensors", reader),
        studios = studios ?: throw Util.missingProperty("studios", "studios", reader),
        genres = genres ?: throw Util.missingProperty("genres", "genres", reader),
        explicitGenres = explicitGenres ?: throw Util.missingProperty("explicitGenres",
            "explicit_genres", reader),
        themes = themes ?: throw Util.missingProperty("themes", "themes", reader),
        demographics = demographics ?: throw Util.missingProperty("demographics", "demographics",
            reader)
    )
  }

  public override fun toJson(writer: JsonWriter, value_: Anime?): Unit {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("mal_id")
    intAdapter.toJson(writer, value_.malId)
    writer.name("url")
    stringAdapter.toJson(writer, value_.url)
    writer.name("images")
    imagesAdapter.toJson(writer, value_.images)
    writer.name("trailer")
    trailerAdapter.toJson(writer, value_.trailer)
    writer.name("approved")
    booleanAdapter.toJson(writer, value_.approved)
    writer.name("titles")
    listOfTitleAdapter.toJson(writer, value_.titles)
    writer.name("title")
    stringAdapter.toJson(writer, value_.title)
    writer.name("title_english")
    nullableStringAdapter.toJson(writer, value_.titleEnglish)
    writer.name("title_japanese")
    nullableStringAdapter.toJson(writer, value_.titleJapanese)
    writer.name("title_synonyms")
    listOfStringAdapter.toJson(writer, value_.titleSynonyms)
    writer.name("type")
    nullableStringAdapter.toJson(writer, value_.type)
    writer.name("source")
    nullableStringAdapter.toJson(writer, value_.source)
    writer.name("episodes")
    nullableIntAdapter.toJson(writer, value_.episodes)
    writer.name("status")
    nullableStringAdapter.toJson(writer, value_.status)
    writer.name("airing")
    booleanAdapter.toJson(writer, value_.airing)
    writer.name("aired")
    airedAdapter.toJson(writer, value_.aired)
    writer.name("duration")
    nullableStringAdapter.toJson(writer, value_.duration)
    writer.name("rating")
    nullableStringAdapter.toJson(writer, value_.rating)
    writer.name("score")
    nullableDoubleAdapter.toJson(writer, value_.score)
    writer.name("scored_by")
    nullableIntAdapter.toJson(writer, value_.scoredBy)
    writer.name("rank")
    nullableIntAdapter.toJson(writer, value_.rank)
    writer.name("popularity")
    nullableIntAdapter.toJson(writer, value_.popularity)
    writer.name("members")
    nullableIntAdapter.toJson(writer, value_.members)
    writer.name("favorites")
    nullableIntAdapter.toJson(writer, value_.favorites)
    writer.name("synopsis")
    nullableStringAdapter.toJson(writer, value_.synopsis)
    writer.name("background")
    nullableStringAdapter.toJson(writer, value_.background)
    writer.name("season")
    nullableStringAdapter.toJson(writer, value_.season)
    writer.name("year")
    nullableIntAdapter.toJson(writer, value_.year)
    writer.name("broadcast")
    nullableBroadcastAdapter.toJson(writer, value_.broadcast)
    writer.name("producers")
    listOfEntityAdapter.toJson(writer, value_.producers)
    writer.name("licensors")
    listOfEntityAdapter.toJson(writer, value_.licensors)
    writer.name("studios")
    listOfEntityAdapter.toJson(writer, value_.studios)
    writer.name("genres")
    listOfEntityAdapter.toJson(writer, value_.genres)
    writer.name("explicit_genres")
    listOfEntityAdapter.toJson(writer, value_.explicitGenres)
    writer.name("themes")
    listOfEntityAdapter.toJson(writer, value_.themes)
    writer.name("demographics")
    listOfEntityAdapter.toJson(writer, value_.demographics)
    writer.endObject()
  }
}

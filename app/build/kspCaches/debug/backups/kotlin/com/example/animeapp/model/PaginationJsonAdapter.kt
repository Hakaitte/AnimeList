// Code generated by moshi-kotlin-codegen. Do not edit.
@file:Suppress("DEPRECATION", "unused", "UNUSED_PARAMETER", "ClassName", "REDUNDANT_PROJECTION",
    "RedundantExplicitType", "LocalVariableName", "RedundantVisibilityModifier",
    "PLATFORM_CLASS_MAPPED_TO_KOTLIN", "IMPLICIT_NOTHING_TYPE_ARGUMENT_IN_RETURN_POSITION")

package com.example.animeapp.model

import com.squareup.moshi.JsonAdapter
import com.squareup.moshi.JsonReader
import com.squareup.moshi.JsonWriter
import com.squareup.moshi.Moshi
import com.squareup.moshi.`internal`.Util
import java.lang.NullPointerException
import kotlin.Boolean
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.emptySet
import kotlin.text.buildString

public class PaginationJsonAdapter(
  moshi: Moshi,
) : JsonAdapter<Pagination>() {
  private val options: JsonReader.Options = JsonReader.Options.of("last_visible_page",
      "has_next_page", "current_page", "items")

  private val intAdapter: JsonAdapter<Int> = moshi.adapter(Int::class.java, emptySet(),
      "lastVisiblePage")

  private val booleanAdapter: JsonAdapter<Boolean> = moshi.adapter(Boolean::class.java, emptySet(),
      "hasNextPage")

  private val itemsAdapter: JsonAdapter<Items> = moshi.adapter(Items::class.java, emptySet(),
      "items")

  override fun toString(): String = buildString(32) {
      append("GeneratedJsonAdapter(").append("Pagination").append(')') }

  override fun fromJson(reader: JsonReader): Pagination {
    var lastVisiblePage: Int? = null
    var hasNextPage: Boolean? = null
    var currentPage: Int? = null
    var items: Items? = null
    reader.beginObject()
    while (reader.hasNext()) {
      when (reader.selectName(options)) {
        0 -> lastVisiblePage = intAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("lastVisiblePage", "last_visible_page", reader)
        1 -> hasNextPage = booleanAdapter.fromJson(reader) ?:
            throw Util.unexpectedNull("hasNextPage", "has_next_page", reader)
        2 -> currentPage = intAdapter.fromJson(reader) ?: throw Util.unexpectedNull("currentPage",
            "current_page", reader)
        3 -> items = itemsAdapter.fromJson(reader) ?: throw Util.unexpectedNull("items", "items",
            reader)
        -1 -> {
          // Unknown name, skip it.
          reader.skipName()
          reader.skipValue()
        }
      }
    }
    reader.endObject()
    return Pagination(
        lastVisiblePage = lastVisiblePage ?: throw Util.missingProperty("lastVisiblePage",
            "last_visible_page", reader),
        hasNextPage = hasNextPage ?: throw Util.missingProperty("hasNextPage", "has_next_page",
            reader),
        currentPage = currentPage ?: throw Util.missingProperty("currentPage", "current_page",
            reader),
        items = items ?: throw Util.missingProperty("items", "items", reader)
    )
  }

  override fun toJson(writer: JsonWriter, value_: Pagination?) {
    if (value_ == null) {
      throw NullPointerException("value_ was null! Wrap in .nullSafe() to write nullable values.")
    }
    writer.beginObject()
    writer.name("last_visible_page")
    intAdapter.toJson(writer, value_.lastVisiblePage)
    writer.name("has_next_page")
    booleanAdapter.toJson(writer, value_.hasNextPage)
    writer.name("current_page")
    intAdapter.toJson(writer, value_.currentPage)
    writer.name("items")
    itemsAdapter.toJson(writer, value_.items)
    writer.endObject()
  }
}
